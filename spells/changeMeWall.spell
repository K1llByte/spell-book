#!/bin/bash
set -e

#shellcheck source=/home/mendess/.local/bin/library
. library

show_help() {
    exe="$(basename "$0")"
    echo -e "Change wallpaper to a random one
    \e[36mUsage:\e[0m $exe [OPTIONS...] [Walllpaper...]
    \e[36mOptions:\e[0m
        -f filter
            Pick a wallpaper using grep over the filenames. Random matches will be picked
        -s
            Show an sxiv image picker. Mark the wallpapers with \`m\` and quit to set.
            \e[1mnote:\e[0m Overrides wallpapers passed as arguments.
        -w
            Force wide screen. Usefull when passing a wallpaper as parameter
        -l
            List walls instead of picking one

    \e[36mExamples:\e[0m
        Pick a random wallpaper
            $ $exe
        Choose a specific one
            $ $exe path/to/wall1 http://link/to/wall2 etc...
        Pick a random one that has a word in it's name
            $ $exe -f blue"
}
BRIGHTNESS_FILTER='
import sys
import colorsys
count = 1
outputs = 0
last_colors = []
last_line = ""
last_last_line = ""
for line in sys.stdin:
    line = line.strip()
    og_line = str(line)
    if line.startswith("#"):
        line = line[1:]
    r = int(line[0:2], 16)
    g = int(line[2:4], 16)
    b = int(line[4:6], 16)
    hsv = colorsys.rgb_to_hsv(r / 255, g / 255, b / 255)
    if False and (hsv[1] < 0.2 or hsv[2] < 0.3):
        print("{:02d}:".format(count), og_line, r, g, b, "s: {:.2f} v: {:.2f}".format(*hsv[1:]), file=sys.stderr)
    else:
        outputs += 1
        print(og_line)
    count += 1
    if len(last_colors) > 0:
        last_colors.pop(0)
    last_colors.append(og_line)

if outputs < 3:
    for i in last_colors:
        print(i)
    print("resorting to most common", last_line, file=sys.stderr)
'
wide=0
while [ "$#" -gt 0 ]; do
    case "$1" in
        -f) # filter to pass to grep for wallpaper searching
            filter="$2"
            shift
            ;;
        -s)
            sxiv=1
            ;;
        -w)
            wide=1
            ;;
        -l)
            list_mode=1
            ;;
        -h | --help)
            show_help
            exit 1
            ;;
        -*)
            echo "Invalid option '$1'"
            exit 1
            ;;
        *)
            if [ -z "$files" ]; then
                files="$1"
            else
                files="$files $1"
            fi
            ;;
    esac
    shift
done
if [ -n "$sxiv" ]; then
    files="$(sxiv -to "$WALLPAPERS")"
elif [ -z "$files" ]; then
    files="$(find "$WALLPAPERS" -type f |
        grep -iP "$filter")"
fi

if [ $list_mode ]; then
    echo "$files"
    exit 0
fi
files=$(echo "$files" |
    shuf -n "$(xrandr --query | grep ' connected' -c)" |
    grep -vP '^$')

i=1
for file in $files; do
    [ "$wide" -gt 0 ] && break
    aspect_ratio="$(convert "$file" -format '%[fx:w/h]' info:)"
    wide=$(echo "$aspect_ratio" | awk '$0 >= 2.5 {found=1}
    END {if(found) {print '$i'} else {print "0"}}')
    i=$((i + 1))
done
unset i

[ "$wide" -gt 0 ] && files=$(echo "$files" | sed -n -e "${wide}"p)

first="$(echo "$files" | head -1)"
if command -v bspc &>/dev/null; then
    mapfile -t colors < <(
        convert "$first" +dither -colors 10 histogram: |
            grep -aoP '[0-9][0-9][0-9]+:.*$' |
            sort -n |
            grep -aoP '#[^ ].....' |
            python3 -c "$BRIGHTNESS_FILTER" |
            head -3
    )
    echo "Picking ${colors[*]}"

    bspc config normal_border_color "${colors[2]}"
    bspc config active_border_color "${colors[1]}"
    bspc config focused_border_color "${colors[0]}"
    bspc config presel_feedback_color "${colors[2]}"
    if nmcli -t dev | grep ZON2010 || [[ "$(hostname)" = tolaria ]]; then
        #shellcheck disable=2029
        [ -e /tmp/mood_light ] ||
            ssh mirrodin "python ~/bulb/color.py \\${colors[0]}"
    fi
fi 2>&1 | color_picker -f

echo "Setting:
$files"
if [ "$wide" -gt 0 ]; then
    echo "$files" | xargs feh --no-fehbg --bg-fill --no-xinerama
else
    echo "$files" | xargs feh --no-fehbg --bg-fill
fi
wait

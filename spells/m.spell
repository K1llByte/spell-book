#!/bin/bash
#shellcheck disable=SC2119

CALLING_DIR="$PWD"

cd "$SPELLS"/spells || exit 1

#shellcheck source=/home/mendess/.local/bin/library
. library

spotify_toggle_pause() {
    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause
}

spotify_next() {
    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next
}

spotify_prev() {
    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous
}

up_next() {
    next_id="$(($(echo '{ "command": ["get_property", "playlist-pos"]}' |
        socat - "$(mpvsocket)" |
        jq .data) + 1))"

    videoId="$(echo '{ "command": ["get_property", "playlist"]}' |
        socat - "$(mpvsocket)" | jq .data["$next_id"].filename -r)"

    if [[ "$videoId" = *youtu* ]]; then
        id="$(echo "$videoId" | sed -r 's|.*/([^/]+)/?$|\1|g')"
        filename=$(awk -F '\t' '$2 ~ /'"$id"'/ {print $1}' "$PLAYLIST")
        if [ -z "$filename" ]; then
            filename=$(youtube-dl --get-title "$videoId")
        fi
    else
        filename=$(basename "$videoId" | sed -r 's/\.[^.]+$//' | sed -r 's/-[a-zA-Z\-_0-9]{11}$//')
    fi
    width=40
    [ "${#filename}" -gt $width ] && width="${#filename}"
    if [ -n "$filename" ] && [ "$filename" != null ]; then
        echo "=== UP NEXT ==="
        echo "$filename"
    fi
}

current_song() {
    filename=$(echo '{ "command": ["get_property", "media-title"] }' |
        socat - "$(mpvsocket)" |
        jq --raw-output '.data')

    videoId="$(echo '{ "command": ["get_property", "filename"] }' |
        socat - "$(mpvsocket)" |
        jq --raw-output '.data')"

    chapter=$(echo '{ "command": ["get_property", "chapter-metadata"] }' |
        socat - "$(mpvsocket)" |
        jq '.data.title' -r)

    if [ -z "$filename" ] || [ "$filename" = "_" ] || [ "$filename" = "$videoId" ]; then
        [ -z "$videoId" ] && exit 1
        filename=$(grep "$videoId" "$PLAYLIST" | awk -F '\t' '{print $1}')
        [ -z "$filename" ] && filename="$videoId"
    fi
    if [ -n "$chapter" ] && [ "$chapter" != "null" ]; then
        filename="Video:  $filename
Song:   $chapter"
    fi
    width=40
    [ "${#filename}" -gt $width ] && width="${#filename}"
    cateories=$(awk -F'\t' '/'"$videoId"'/ {
            for(i = 4; i <= NF; i++) {
                acc = acc " | " $i
            };
            print("Categories:"acc" |")
        }' "$PLAYLIST" |
        fold -s -w "$width")
    case $1 in
        -n | --notify)
            if [ -n "$cateories" ]; then
                filename="$filename
$cateories"
            fi
            filename="$filename

$(up_next)"
            notify-send "Now Playing" "$filename" -a "$(basename "$0")"
            __update_panel
            ;;
        -i | --link)
            echo '{ "command": ["get_property", "filename"] }' |
                socat - "$(mpvsocket)" |
                jq --raw-output '.data'
            ;;
        *)
            echo "Now Playing"
            echo "$filename"
            ;;
    esac
}

add_cat() {
    current_song=$(current_song --link | tail -1 | sed 's/"//g')

    [ -z "$current_song" ] && exit 2

    while :; do
        cat=$(echo | dmenu -p "Category name? (Esq to quit)")
        if [ -z "$cat" ]; then
            break
        fi
        sed -i -E "/$current_song/ s|$|	$cat|" "$PLAYLIST"
    done
}

last_queue() {
    echo "$(mpvsocket)_last_queue"
}

queue_v2() {
    local targets=()
    while [ $# -gt 0 ]; do
        case "$1" in
            -n | --notify)
                notify=1
                ;;
            -r | --reset)
                echo "Reseting queue..."
                rm "$(last_queue)"
                ;;
            -m | --no-move)
                no_move=1
                ;;
            -s | --search)
                shift
                targets+=("ytdl://ytsearch:$1")
                ;;
            -*)
                echo "Invalid option: '$1'"
                return 1
                ;;
            http*)
                [ "$(youtube-dl --max-downloads 1 --get-title "$1" --quiet | wc -l)" -ne 1 ] &&
                    notify-send 'Invalid link:' "$1" -a "$(basename "$0")" &&
                    echo "[$(date)] $1" >>/tmp/.queue_fails

                targets+=("$1")
                ;;
            *)
                [ -z "$1" ] &&
                    notify-send 'Error queueing' 'Empty file name' -a "$(basename "$0")" &&
                    return 1
                if [ -e "$1" ] || [ -e "$CALLING_DIR/$1" ]; then
                    targets+=("$1")
                else
                    matches="$(awk -F'\t' '{print($1"\t"$2)}' "$PLAYLIST" | grep -i "${@:2}")"
                    link="$(echo "$matches" | cut -f2)"
                    [ -z "$link" ] && echo "No song found" && return 1
                    [ "$(echo "$link" | wc -l)" -gt 1 ] &&
                        echo -e "Too many matches:\n$(echo "$matches" | cut -f1)" &&
                        return 1

                    targets+=("${link}")
                fi
                ;;
        esac
        shift
    done
    [ "${#targets[@]}" -lt 1 ] &&
        echo "No files to queue" &&
        return 1

    background_notifiers=0
    for file in "${targets[@]}"; do
        echo -n "Queueing song: '$file'... "
        echo '{ "command": ["loadfile", "'"$file"'", "append"]}' |
            socat - "$(mpvsocket)" |
            jq --raw-output .error

        [ "$no_move" ] || {
            local COUNT CURRENT TARGET LAST_QUEUE
            COUNT=$(echo '{ "command": ["get_property", "playlist-count"]}' |
                socat - "$(mpvsocket)" |
                jq --raw-output '.data')
            CURRENT=$(echo '{ "command": ["get_property", "playlist-pos"]}' |
                socat - "$(mpvsocket)" |
                jq --raw-output '.data')

            TARGET=$((CURRENT + 1))
            LAST_QUEUE="$(last_queue)"
            if [ -e "$LAST_QUEUE" ] && [ "$TARGET" -le "$(cat "$LAST_QUEUE")" ]; then
                TARGET=$(($(cat "$LAST_QUEUE") + 1))
            fi
            echo -n "Moving from $COUNT -> $TARGET ... "
            echo '{ "command": ["playlist-move", '$((COUNT - 1))', '$TARGET']}' |
                socat - "$(mpvsocket)" |
                jq --raw-output .error
            echo "$TARGET" >"$LAST_QUEUE"
        }
        [ "$notify" ] && {
            IMG=$(mktemp --tmpdir tmp.XXXXXXXXXXXXXXXXX.png)
            IMG_BACK="${IMG}_back.png"
            if [[ "$file" == https* ]]; then
                data=$(youtube-dl --get-title "$file" --get-thumbnail)
                name=$(echo "$data" | head -1)
                echo "$data" | tail -1 | xargs -r wget --quiet -O "$IMG"
                [ -z "$name" ] && name="$file"
            else
                name="$(ffprobe "$file" 2>&1 | grep title | cut -d':' -f2 | xargs)"
                ffmpeg -y -loglevel error -hide_banner -vsync 2 -i "$file" -frames:v 1 "$IMG" >/dev/null
            fi
            convert -scale x64 -- "$IMG" "$IMG_BACK" && mv "$IMG_BACK" "$IMG"
            notify-send "Queued '$name'" \
                "$([ "$CURRENT" ] && printf "Current: %s\nQueue pos: %s" "$CURRENT" "$TARGET")" \
                -a "$(basename "$0")" \
                -i "$IMG"
            rm -f "$IMG"
        } &
        ((background_notifiers++))
        if [ $background_notifiers -ge $(($(nproc) * 2)) ]; then
            wait -n
            ((background_notifiers--))
        fi
    done
    while [ $background_notifiers -ge 0 ]; do
        wait -n
        ((background_notifiers--))
    done
}

queue() {
    if [ "$#" -lt 1 ]; then
        echo please provide a link
        return 1
    fi
    if [ "$1" = '--reset' ]; then
        rm "$(last_queue)"
        return 0
    fi
    if [ -z "$1" ]; then
        notify-send 'Error queueing' 'Empty file name' -a "$(basename "$0")"
        return 1
    fi
    if [[ "$1" == http* ]] &&
        [ "$(youtube-dl --max-downloads 1 --get-title "$1" --quiet | wc -l)" -ne 1 ]; then
        notify-send 'Invalid link:' "$1" -a "$(basename "$0")" -u critical
        echo "[$(date)] $1" >>/tmp/.queue_fails
        return 1
    fi
    echo -n "Queueing song: '$1'... "
    echo '{ "command": ["loadfile", "'"$1"'", "append"]}' |
        socat - "$(mpvsocket)" |
        jq --raw-output .error
    local COUNT CURRENT TARGET LAST_QUEUE
    COUNT=$(echo '{ "command": ["get_property", "playlist-count"]}' |
        socat - "$(mpvsocket)" |
        jq --raw-output '.data')
    CURRENT=$(echo '{ "command": ["get_property", "playlist-pos"]}' |
        socat - "$(mpvsocket)" |
        jq --raw-output '.data')

    TARGET=$((CURRENT + 1))
    LAST_QUEUE="$(last_queue)"
    if [ -e "$LAST_QUEUE" ] && [ "$TARGET" -le "$(cat "$LAST_QUEUE")" ]; then
        TARGET=$(($(cat "$LAST_QUEUE") + 1))
    fi
    echo -n "Moving from $COUNT -> $TARGET ... "
    echo '{ "command": ["playlist-move", '$((COUNT - 1))', '$TARGET']}' |
        socat - "$(mpvsocket)" |
        jq --raw-output .error
    echo "$TARGET" >"$LAST_QUEUE"
    if [ "$2" = "--notify" ]; then
        IMG=/tmp/thumb.jpg
        rm "$IMG"
        if [[ "$1" == https* ]]; then
            data=$(youtube-dl --get-title "$1" --get-thumbnail)
            name=$(echo "$data" | head -1)
            echo "$data" | tail -1 | xargs -r wget --quiet -O "$IMG"
            [ -z "$name" ] && name="$1"
        else
            name="$(ffprobe "$1" 2>&1 | grep title | cut -d':' -f2 | xargs)"
            ffmpeg -loglevel error -hide_banner -vsync 2 -i "$1" -frames:v 1 "$IMG" >/dev/null
        fi
        convert -scale x64 -- "$IMG" "tmp" && mv tmp "$IMG"
        notify-send "Queued '$name'" "Current: $CURRENT\nQueue pos: $TARGET" \
            -a "$(basename "$0")" \
            -i $IMG
    fi
}

main() {
    case $1 in
        p | pause)
            ## Togle pause
            if pgrep spotify &>/dev/null; then
                spotify_toggle_pause
            else
                echo 'cycle pause' | socat - "$(mpvsocket)"
                __update_panel
            fi
            ;;
        quit)
            ## Kill the most recent player
            echo 'quit' | socat - "$(mpvsocket)"
            __update_panel
            ;;
        play)
            ## Play something
            ##      Usage: m play link
            if [ -z "$2" ]; then
                echo 'Give me something to play'
                exit 1
            fi
            mpv --no-video --input-ipc-server="$(mpvsocket new)" "$2"
            ;;
        add?song | new)
            ## Add a new song
            ##      Usage: m add-song [options] link [category,..]
            ## Options:
            case $2 in
                -q | --queue)
                    ## Queue the song too
                    shift
                    m queue "$2"
                    main add_song "${@:2}"
                    ;;
                *)
                    ./helpers/add_link.sh "${@:2}"
                    ;;
            esac
            ;;
        add?playlist)
            ## Append a playlist to the personal playlist
            ##      Usage: m add-playlist [link] [category,..]
            youtube-dl --get-id "$2" | sed 's|^|https://youtu.be/|' | while read -r l; do
                echo "adding $l"
                main add_song "$l" "${@:3}"
            done
            ;;
        cat)
            ## List all current categories
            cut -f4- "$PLAYLIST" | tr '\t' '\n' | grep -vP '^$' | sort | uniq
            ;;
        c | current)
            ## Show the current song
            ##      -n --notify With a notification
            ##      -i --link   Print the filename / link
            ##      default:    The song's name
            current_song "${@:2}"
            ;;
        add-cat-to-current | new-cat)
            ## Add a category to the current song
            add_cat "${@:2}"
            ;;
        queue)
            ## Queue a song
            ##     --reset Resets the queue fairness
            queue_v2 "${@:2}"
            return "$?"
            if [ "$2" = '--reset' ]; then
                queue "$2"
            elif [[ "$2" == http* ]]; then
                queue "$2" "$3"
            elif [ -e "$2" ] || [ -e "$CALLING_DIR/$2" ]; then
                queue "$2" "$3"
            else
                matches="$(awk -F'\t' '{print($1"\t"$2)}' "$PLAYLIST" | grep -i "${@:2}")"
                link="$(echo "$matches" | cut -f2)"
                if [ -z "$link" ]; then echo "No song found" && exit 1; fi
                if [ "$(echo "$link" | wc -l)" -gt 1 ]; then
                    echo -e "Too many matches:\n$(echo "$matches" | cut -f1)" && exit 1
                fi
                queue "$link" "$3"
            fi
            ;;
        delete?song)
            ## Delete a passed song
            [ $# -gt 1 ] || exit 1
            ./helpers/del_link.sh "${@:2}"
            ;;
        k | vu)
            ## Increase volume by ${2:-2}%
            echo "add volume ${2:-2}" | socat - "$(mpvsocket)"
            __update_panel
            ;;
        j | vd)
            ## Increase volume by ${2:-2}%
            echo "add volume -${2:-2}" | socat - "$(mpvsocket)"
            __update_panel
            ;;
        H | prev)
            ## Previous chapter in a file
            echo 'add chapter -1' | socat - "$(mpvsocket)"
            __update_panel
            {
                sleep 2
                __update_panel
            } &
            ;;
        L | next)
            ## Next chapter in a file
            echo 'add chapter 1' | socat - "$(mpvsocket)"
            __update_panel
            {
                sleep 2
                __update_panel
            } &
            ;;
        h | prev-file)
            ## Go to previous file
            if pgrep spotify &>/dev/null; then
                spotify_prev
            else
                echo 'playlist-prev' | socat - "$(mpvsocket)"
            fi
            {
                sleep 2
                __update_panel
            } &
            ;;
        l | next-file)
            ## Skip to the next file
            if pgrep spotify &>/dev/null; then
                spotify_next
            else
                echo 'playlist-next' | socat - "$(mpvsocket)"
            fi
            {
                sleep 2
                __update_panel
            } &
            ;;
        J | back)
            ## Seek ${2:-10}s backward
            echo "seek -${2:-10}" | socat - "$(mpvsocket)"
            ;;
        K | frwd)
            ## Seek ${2:-10}s forward
            echo "seek ${2:-10}" | socat - "$(mpvsocket)"
            ;;
        int | interactive)
            ## Enter interactive mode
            while :; do
                read -r -n 1 input
                [ "$input" = "q" ] && break
                [ "$input" = "c" ] && echo
                main "$input"
                [ "$input" = "c" ] || echo -en "\b"
            done
            ;;
        r)
            ## Get help for interactive mode
            echo -en "\b"
            grep -Po ' \w\|\w[^)]+\)' "$0"
            ;;
        help)
            ## Get help
            if [ $# -gt 0 ]; then
                search_for="$2"
                search=1
            else
                search=0
            fi
            awk 'BEGIN { in_main=0; in_case=0; inner_case=0; search='$search' }
            $0 ~ /main\(\)/                                                     {in_main=1}
            inner_case  && $0 ~ /\w[^)]*\)$/                                    {print("\t"$1)}
            inner_case  && (found || !search) && $0 ~ /^\s+##.*/                {sub(/^\s+##/, "", $0); print("\t\t"$0)}
            inner_case  && $0 ~ /esac/                                          {inner_case=0}
            !inner_case && $0 ~ /;;/                                            {found=0}
            !inner_case && in_case && $0 ~ /case/                               {inner_case=1}
            !inner_case && in_case && !search && $0 ~ /\w[^)]*\)$/              {print($1)}
            !inner_case && in_case && search  && $0 ~ /'"$search_for"'[^)]*\)$/ {print($1); found=1}
            !inner_case && in_case && (found || !search) && $0 ~ /^\s+##.*/     {sub(/^\s+##/, "", $0); print("\t"$0)}
            in_main     && $0 ~ /case/                                          {in_case=1}
            ' "$0"
            ;;
        *)
            echo "¯\\_(ツ)_/¯"
            echo "use r|help to see available commands"
            ;;
    esac
}

main "$@"

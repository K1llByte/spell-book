#!/bin/bash
#shellcheck disable=SC2119

cd "$SPELLS"/spells || exit 1

#shellcheck source=/home/mendess/.local/bin/library
. library

spotify_toggle_pause() {
    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause
}

spotify_next() {
    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next
}

spotify_prev() {
    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous
}

up_next() {
    next_id="$(( $(echo '{ "command": ["get_property", "playlist-pos"]}' \
        | socat - "$(mpvsocket)" \
        | jq .data) + 1))"

    videoId="$(echo '{ "command": ["get_property", "playlist"]}' \
        | socat - "$(mpvsocket)" | jq .data["$next_id"].filename -r)"

    if [[ "$videoId" = *youtu* ]]
    then
        id="$(echo "$videoId" | sed -r 's|.*/([^/]+)/?$|\1|g')"
        filename=$(awk -F '\t' '$2 ~ /'"$id"'/ {print $1}' "$PLAYLIST")
        if [ -z "$filename" ]
        then
            filename=$(youtube-dl --get-title "$videoId")
        fi
    else
        filename=$(basename "$videoId" | sed -r 's/\.[^.]+$//' | sed -r 's/-[a-zA-Z\-_0-9]{11}$//')
    fi
    width=40
    [ "${#filename}" -gt $width ] && width="${#filename}"
    if [ -n "$filename" ] && [ "$filename" != null ]
    then
        echo "=== UP NEXT ==="
        echo "$filename"
    fi
}

current_song () {
    filename=$(echo '{ "command": ["get_property", "media-title"] }' \
        | socat - "$(mpvsocket)" \
        | jq --raw-output '.data')

    videoId="$(echo '{ "command": ["get_property", "filename"] }' \
        | socat - "$(mpvsocket)" \
        | jq --raw-output '.data')"

    chapter=$(echo '{ "command": ["get_property", "chapter-metadata"] }' \
            | socat - "$(mpvsocket)" \
            | jq '.data.title' -r)

    if [ -z "$filename" ] || [ "$filename" = "_" ] || [ "$filename" = "$videoId" ]
    then
        [ -z "$videoId" ] && exit 1
        filename=$(grep "$videoId" "$PLAYLIST" | awk -F '\t' '{print $1}')
        [ -z "$filename" ] && filename="$videoId"
    fi
    if [ -n "$chapter" ] && [ "$chapter" != "null" ]
    then
        filename="Video:  $filename
Song:   $chapter"
    fi
    width=40
    [ "${#filename}" -gt $width ] && width="${#filename}"
    cateories=$(awk -F'\t' '/'"$videoId"'/ {
            for(i = 4; i <= NF; i++) {
                acc = acc " | " $i
            };
            print("Categories:"acc" |")
        }' "$PLAYLIST" \
        | fold -s -w "$width")
    case $1 in
         -n|--notify)
             if [ -n "$cateories" ]
             then
                 filename="$filename
$cateories"
             fi
             filename="$filename

$(up_next)"
             notify-send "Now Playing" "$filename" -a "$(basename "$0")"
             __update_panel
             ;;
         -i|--link)
             echo '{ "command": ["get_property", "filename"] }' \
                | socat - "$(mpvsocket)" \
                | jq --raw-output '.data'
             ;;
          *)
             echo "Now Playing"
             echo "$filename"
             ;;
    esac
}

add_cat () {
    current_song=$(current_song --link | tail -1 | sed 's/"//g')

    [ -z "$current_song" ] && exit 2

    while :
    do
        cat=$(echo | dmenu -p "Category name? (Esq to quit)")
        if [ -z "$cat" ]
        then
            break
        fi
        sed -i -E "/$current_song/ s|$|	$cat|" "$PLAYLIST"
    done
}

last_queue() {
    echo "$(mpvsocket)_last_queue"
}

queue () {
    if [ "$#" -lt 1 ]
    then
        echo please provide a link
        return 1
    fi
    if [ "$1" = '--reset' ]; then
        rm "$(last_queue)"
        return 0
    fi
    echo -n "Queueing song: '$1'... "
    echo '{ "command": ["loadfile", "'"$1"'", "append"]}' \
        | socat - "$(mpvsocket)" \
        | jq --raw-output .error
    local COUNT CURRENT TARGET LAST_QUEUE
    COUNT=$(echo '{ "command": ["get_property", "playlist-count"]}' \
        | socat - "$(mpvsocket)" \
        | jq --raw-output '.data')
    CURRENT=$(echo '{ "command": ["get_property", "playlist-pos"]}' \
        | socat - "$(mpvsocket)" \
        | jq --raw-output '.data')

    TARGET=$((CURRENT + 1))
    LAST_QUEUE="$(last_queue)"
    if [ -e "$LAST_QUEUE" ] && [ "$TARGET" -le "$(cat "$LAST_QUEUE")" ]
    then
        TARGET=$(( $(cat "$LAST_QUEUE") + 1 ))
    fi
    echo -n "Moving from $COUNT -> $TARGET ... "
    echo '{ "command": ["playlist-move", '$((COUNT - 1))', '$TARGET']}' \
        | socat - "$(mpvsocket)" \
        | jq --raw-output .error
    echo "$TARGET" > "$LAST_QUEUE"
    if [ "$2" = "--notify" ]
    then
        IMG=/tmp/thumb.jpg
        if echo "$1" | grep -P 'https' &>/dev/null; then
            data=$(youtube-dl --get-title "$1")
            name=$(echo "$data" | head -1)
            echo "$data" | tail -1 | xargs wget --quiet -O "$IMG"
        else
            name="$(ffprobe "$1" 2>&1 | grep title | cut -d':' -f2 | xargs)"
            ffmpeg -loglevel error -hide_banner -vsync 2 -i "$1"  -frames:v 1 "$IMG" > /dev/null
        fi
        notify-send "Queued '$name'" "Current: $CURRENT\nQueue pos: $TARGET" \
            -a "$(basename "$0")" \
            -i $IMG
        rm "$IMG"
    fi
}

main () {
    case $1 in
        p|pause)
            if pgrep spotify &>/dev/null; then
                spotify_toggle_pause
            else
                echo 'cycle pause' | socat - "$(mpvsocket)"
                __update_panel
            fi
            ;;
        quit)
            echo 'quit' | socat - "$(mpvsocket)"
            ;;
        add?song|new)
            case $2 in
                -r|--remote)
                    yes no | ssh mirrodin 'zsh -c "PATH=$PATH:~/.local/bin; . ~/.zprofile; ~/.local/bin/syncspellbook; ~/.local/bin/m add_song '"${*:3}"'"; ~/.local/bin/syncspellbook'
                    ;;
                -q|--queue)
                    shift
                    m queue "$2"
                    main add_song "${@:2}"
                    ;;
                *)
                    ./helpers/add_link.sh "${@:2}"
                    ;;
            esac
            ;;
        add?playlist)
            for l in $(youtube-dl --get-id "$2" | sed 's|^|https://youtu.be/|')
            do
                main add_song "$l" "${@:3}"
            done
            ;;
        cat)
            cut -f4- "$PLAYLIST" | tr '\t' '\n' | sort | uniq
            ;;
        c|current)
            current_song "${@:2}"
            ;;
        add-cat-to-current|new-cat)
            add_cat "${@:2}"
            ;;
        queue)
            if [ "$2" = '--reset' ]; then
                queue "$2"
            elif echo "$2" | grep '^http'; then
                queue "$2" "$3"
            elif [ -e "$2" ]; then
                queue "$2" "$3"
            else
                matches="$(awk -F'\t' '{print($1"\t"$2)}' "$PLAYLIST" | grep -i "${@:2}")"
                link="$(echo "$matches" | cut -f2)"
                if [ -z "$link" ]; then echo "No song found" && exit 1; fi
                if [ "$(echo "$link" | wc -l)" -gt 1 ]; then
                    echo -e "Too many matches:\n$(echo "$matches" | cut -f1)" && exit 1
                fi
                queue "$link" "$3"
            fi
            ;;
        delete?song)
            ./helpers/del_link.sh "${@:2}"
            ;;
        k|vu)
            echo "add volume ${2:-2}" | socat - "$(mpvsocket)"
            __update_panel
            ;;
        j|vd)
            echo "add volume -${2:-2}" | socat - "$(mpvsocket)"
            __update_panel
            ;;
        H|prev)
            echo 'add chapter -1' | socat - "$(mpvsocket)"
            __update_panel
            { sleep 2; __update_panel; } &
            ;;
        L|next)
            echo 'add chapter 1' | socat - "$(mpvsocket)"
            __update_panel
            { sleep 2; __update_panel; } &
            ;;
        h|prev-file)
            if pgrep spotify &>/dev/null; then
                spotify_prev
            else
                echo 'playlist-prev' | socat - "$(mpvsocket)"
                { sleep 2; __update_panel; } &
            fi
            __update_panel
            ;;
        l|next-file)
            if pgrep spotify &>/dev/null; then
                spotify_next
            else
                echo 'playlist-next' | socat - "$(mpvsocket)"
                { sleep 2; __update_panel; } &
            fi
            __update_panel
            ;;
        J|back)
            echo "seek -${2:-10}" | socat - "$(mpvsocket)"
            ;;
        K|frwd)
            echo "seek ${2:-10}" | socat - "$(mpvsocket)"
            ;;
        int|interactive)
            while :;
            do
                read -r -n 1 input
                [ "$input" = "q" ] && break
                [ "$input" = "c" ] && echo
                main "$input"
                [ "$input" = "c" ] || echo -en "\b"
            done
            ;;
        r|help)
            echo -en "\b"
            grep -Po ' \w\|\w[^)]+\)' "$0"
            ;;
        *)
            echo "¯\\_(ツ)_/¯"
            echo "use r|help to see available commands"
    esac
}

main "$@"
